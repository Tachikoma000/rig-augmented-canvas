import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Main plugin build
const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
});

// Worker wrapper build
const workerContext = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["worker-wrapper.js"],
	bundle: false, // Don't bundle, just transform
	format: "esm",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	outfile: "worker.js",
});

// Copy WASM files to the output directory
async function copyWasmFiles() {
	const wasmDir = "../worker/pkg";
	const outputDirs = ["./worker", "."];
	
	// Create output directories if they don't exist
	for (const dir of outputDirs) {
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir, { recursive: true });
		}
	}
	
	// Copy WASM and JS files
	const filesToCopy = fs.readdirSync(wasmDir).filter(file => 
		file.endsWith(".wasm") || 
		file.endsWith(".js") || 
		file.endsWith(".ts")
	);
	
	// Copy to each output directory
	for (const outputDir of outputDirs) {
		for (const file of filesToCopy) {
			const sourcePath = path.join(wasmDir, file);
			const destPath = path.join(outputDir, file);
			fs.copyFileSync(sourcePath, destPath);
			console.log(`Copied ${sourcePath} to ${destPath}`);
		}
	}
}

if (prod) {
	await context.rebuild();
	await workerContext.rebuild();
	await copyWasmFiles();
	process.exit(0);
} else {
	await context.watch();
	await workerContext.watch();
	await copyWasmFiles();
}
